

MONGO DB VERSIONING :
 What is __v in Mongoose?
The __v field is used by Mongoose for versioning.
It is mainly used to track document versions when using Mongoose's "Optimistic Concurrency Control".
The default value is 0, and it increments whenever the document is updated if versioning is enabled.

If you don‚Äôt need __v, you can remove it in 3 ways:
const event = await Event.find(queryObject).select('-__v');
...> This will exclude the __v field from the response.

Method 2: Use Schema Option (versionKey: false)
If you don‚Äôt want Mongoose to create the __v field at all, set versionKey: false in your schema:

const eventSchema = new mongoose.Schema({
    eventname: String,
    eventdate: String,
    eventlocation: String,
    amountrange: Number
}, { versionKey: false });  // üîπ Disables `__v`

This ensures that __v is never added to any document.

Method 3: Use .toJSON() or .toObject() Hooks
You can modify the JSON output of the model:
eventSchema.set('toJSON', {
    transform: function (doc, ret) {
        delete ret.__v;
        return ret;
    }
});

Usage of __v in Mongoose (Optimistic Concurrency Control)
The __v field in Mongoose is primarily used for Optimistic Concurrency Control (OCC). This helps prevent conflicts when multiple users try to update the same document simultaneously.

What is Optimistic Concurrency Control?
Optimistic Concurrency Control (OCC) is a method used to handle simultaneous updates to a document in a multi-user environment.

Instead of locking a document (as in pessimistic locking), OCC assumes that conflicts are rare.
If a conflict is detected (i.e., another update has already changed the document), the update fails.
The user must then re-fetch the latest document and try the update again.


How __v Works in Mongoose?
Mongoose automatically adds __v: 0 when a document is created.
When the document is updated, Mongoose increments __v by 1.
If two updates happen simultaneously, Mongoose detects version mismatch and throws an error.


Initial Document in MongoDB
{
    "_id": "65f4b2c8e9f3c20017045a2d",
    "eventname": "Tech Conference 2025",
    "eventlocation": "Hyderabad",
    "amountrange": 1500,
    "__v": 0
}
Here, __v: 0 means it's the first version of this document.

 Two Users Fetch the Same Document
User A and User B fetch the event document at the same time.
Both users receive __v: 0 in their response.



User A Updates the Document
await Event.findByIdAndUpdate(
    "65f4b2c8e9f3c20017045a2d",
    { eventlocation: "Bangalore" },
    { new: true }
);


Mongoose increments __v to 1.
The updated document in MongoDB:
{
    "_id": "65f4b2c8e9f3c20017045a2d",
    "eventname": "Tech Conference 2025",
    "eventlocation": "Bangalore",
    "amountrange": 1500,
    "__v": 1
}

User B Tries to Update the Old Version
User B still has __v: 0 in their local data.

If they try to update the event:

await Event.findByIdAndUpdate(
    "65f4b2c8e9f3c20017045a2d",
    { amountrange: 2000 },
    { new: true }
);

Mongoose detects a version mismatch and throws an error, preventing the update.

VersionError: No matching document found for id "65f4b2c8e9f3c20017045a2d" version 0

 How to Enable OCC in Mongoose?
By default, __v is enabled, but you need to use optimisticConcurrency: true to make Mongoose check for version mismatches.


const eventSchema = new mongoose.Schema({
    eventname: String,
    eventlocation: String,
    amountrange: Number
}, { optimisticConcurrency: true });  // üîπ Enables OCC


With optimisticConcurrency: true, if two users update the same document, Mongoose will prevent conflicts by checking __v.




=====================================================================================================================>

COMPLETE REFE FOR TEH PATH AND QUERY DOCUMENTATION :
GET /events/:eventId?eventname=Tech%20Conference&eventlocation=Hyderabad&amountrange=1500
schema: {
        tags: ["Events"],
        summary: "Get event details using event ID and optional filters",
        description: "Fetches an event by event ID and allows optional filtering through query parameters.",
        
        // Path Parameters
        params: {
            type: "object",
            properties: {
                eventId: {
                    type: "string",
                    description: "Unique event ID",
                    example: "60f7b2c8e9f3c20017045a2d"
                }
            },
            required: ["eventId"]
        },

        // Query Parameters
        querystring: {
            type: "object",
            properties: {
                eventname: {
                    type: "string",
                    description: "Event name filter (optional)",
                    example: "Tech Conference 2025"
                },
                eventlocation: {
                    type: "string",
                    description: "Event location filter (optional)",
                    example: "Hyderabad"
                },
                amountrange: {
                    type: "number",
                    description: "Maximum amount range filter (optional)",
                    example: 1500
                }
            }
        },


fastify.get('/events/:eventId', getEventDetails, async (request, reply) => {
    const { eventId } = request.params;
    const { eventname, eventlocation, amountrange } = request.query;

    let queryObject = { _id: eventId };

    if (eventname) queryObject.eventname = eventname;
    if (eventlocation) queryObject.eventlocation = eventlocation;
    if (amountrange) queryObject.amountrange = { $lte: Number(amountrange) };

    try {
        const event = await Event.find(queryObject);


===============================================================================================
SWAGGER API for the path parameters:
export const getEventByIdAndLocation = {
    schema: {
        tags: ["Events"],
        summary: "Get event details by event ID and location",
        description: "Fetches event details using the event ID and location.",
        params: {
            type: "object",
            properties: {
                eventId: {
                    type: "string",
                    description: "Unique event ID",
                    example: "60f7b2c8e9f3c20017045a2d"
                },
                eventLocation: {
                    type: "string",
                    description: "Event location (city name)",
                    example: "Hyderabad"
                }
            },
            required: ["eventId", "eventLocation"]
        },
        response: {
            200: {
                description: "Event details retrieved successfully",
                type: "object",
                properties: {
                    eventname: { type: "string", example: "Tech Conference 2025" },
                    eventdate: { type: "string", example: "2025-07-15" },
                    eventlocation: { type: "string", example: "Hyderabad" },
                    amountrange: { type: "number", example: 1500 },
                    eventtime: { type: "string", example: "18:30:00" },
                    totalseats: { type: "integer", example: 200 },
                    availableseats: { type: "integer", example: 180 },
                    bookedseats: { type: "integer", example: 20 },
                    userId: { type: "string", example: "60f7b2c8e9f3c20017045a2d" }
                }
            },
            404: {
                description: "Event not found",
                type: "object",
                properties: {
                    error: { type: "string", example: "Event not found with the given ID and location" }
                }
            },
            500: {
                description: "Server error",
                type: "object",
                properties: {
                    error: { type: "string", example: "Internal server error" }
                }
            }
        }
    }
};


======================================================================================
SYMBOLS USED IN THE QUERY AND PATH PARAMETERS:

Query Parameters (?key=value&key2=value2)
Special characters must be URL-encoded (encodeURIComponent).
Spaces are converted to %20 or +.
Some symbols can be used directly, but others need encoding.

Symbol	Encoded Version	Example
Space	%20 or +	?search=Tech%20Conference
Comma ,	%2C	?categories=AI%2CML%2CCloud
Slash /	%2F	?path=folder%2Fsubfolder
Colon :	%3A	?time=10%3A30%20AM
Ampersand &	%26	?title=Rock%20%26%20Roll
Question Mark ?	%3F	?message=What%3F%20No%20way!
Equal =	%3D	?query=name%3DJohn
Hash #	%23	?section=Chapter%23Five
Plus +	%2B	?math=2%2B2%3D4
Percent %	%25	?discount=50%25
At @	%40	?email=user%40example.com

üîπ Example Query Parameter Usage


GET /search?name=John%20Doe&category=AI%2CML&price=100%2B
‚û°Ô∏è Searches for "John Doe" in categories AI & ML with a price including +.

2Ô∏è‚É£ Path Parameters (/events/:id/:name)
Slashes / are not allowed inside path parameters (used for separating routes).
Symbols must be encoded when used inside paths.
Use hyphens - and underscores _ safely.

Symbol	Allowed?	Encoded Version	Example
Hyphen -	‚úÖ Yes	No encoding	/events/tech-conference
Underscore _	‚úÖ Yes	No encoding	/user/john_doe
Space	‚ùå No	%20	/events/Tech%20Conference
Slash /	‚ùå No	%2F (not allowed in paths)	(Cannot use)
Comma ,	‚úÖ Yes	%2C	/categories/AI%2CML
Colon :	‚ùå No	%3A	(Avoid in paths)
Ampersand &	‚ùå No	%26	(Avoid in paths)
Equal =	‚ùå No	%3D	(Avoid in paths)
Hash #	‚ùå No	%23	(Avoid in paths)
Question Mark ?	‚ùå No	%3F	(Avoid in paths)

üîπ Example Path Parameter Usage


GET /events/tech-conference-2025/hyderabad
‚û°Ô∏è Fetches details for "Tech Conference 2025" in "Hyderabad".

3Ô∏è‚É£ Mixed Path + Query Parameters
You can combine path parameters and query parameters.


GET /events/tech-conference-2025?location=Hyderabad&price=1000
‚û°Ô∏è Fetches "Tech Conference 2025" in Hyderabad with price 1000.


==================================================================================

fastify.get('/events/:eventname/:eventlocation/:amountrange?', demo);

:eventname ‚Üí Mandatory path parameter
:eventlocation ‚Üí Mandatory path parameter
:amountrange? ‚Üí Optional path parameter (denoted by ?)

export const demo = async (request, reply) => {
    let params = request.params;
    console.log(params);

    let queryObject = {};

    for (let key in params) {
        if (key === 'eventname') {
            const eventNames = params[key].split(',');
            queryObject[key] = { $in: eventNames };
        } else if (key === 'amountrange') {
            const maxAmount = Number(params[key]);
            queryObject[key] = { $gte: 0, $lte: maxAmount };
        } else if (key === 'eventlocation') {
            const eventLocations = params[key].split(',');
            queryObject[key] = { $in: eventLocations };
        } else {
            queryObject[key] = params[key];
        }
    }

    try {
        console.log(queryObject, "Updated before querying the database");
        const result = await Event.find(queryObject);
        reply.status(200).send(result);
    } catch (err) {
        return reply.status(500).send({ error: "Server error for the demo route" });
    }
};


================================================>

sanitization of the number :

import validator from 'validator';

const sanitizeNumber = (num) => {
    if (validator.isNumeric(num, { no_symbols: true })) {
        return Number(validator.trim(num)); // Convert to a number after trimming
    } else {
        throw new Error("Invalid number input");
    }
};

// Example usage:
try {
    const userInput = " 12345 ";  // Example with spaces
    const sanitizedNum = sanitizeNumber(userInput);
    console.log("Sanitized Number:", sanitizedNum);
} catch (error) {
    console.error(error.message);
}

===========================================
OR conditional query parameter :
let orConditions = [];

    for (let key in query) {
        if (key === "eventname") {
            const eventNames = query[key].split(",");
            orConditions.push({ [key]: { $in: eventNames } });
        } else if (key === "amountrange") {
            const maxAmount = Number(query[key]);
            orConditions.push({ [key]: { $gte: 0, $lte: maxAmount } });
        } else if (key === "eventlocation") {
            const eventLocations = query[key].split(",");
            orConditions.push({ [key]: { $in: eventLocations } });
        } else {
            orConditions.push({ [key]: query[key] });
        }
    }

    try {
        let queryObject = orConditions.length > 0 ? { $or: orConditions } : {};

        console.log(queryObject, "updated before going to the database");
        const result = await Event.find(queryObject);

====================================================================================================>




qqqqqq
tokens:
https://github.com/shaikahmadnawaz/access-refresh-tokens-nodejs
https://www.geeksforgeeks.org/jwt-authentication-with-refresh-tokens/
https://www.linkedin.com/pulse/authentication-using-jwt-accesstoken-refreshtoken-nodejs-keshwani-jxjaf/

https://dev.to/smitterhane/a-meticulous-jwt-api-authentication-guide-youve-been-looking-for-47dg

token validation
https://medium.com/@eklavya_/effortless-middleware-testing-in-express-with-jest-a-comprehensive-guide-ce9b103571b4


JEST coverage document :
https://aakanksha-02.medium.com/understanding-the-jest-coverage-report-a-complete-guide-57d950130fdc



..> jest simple uasge code:

https://javascript.plainenglish.io/jest-mock-for-unit-testing-mern-backend-983c1e3fef83

how to implement the refresh token in node js

swagger api
local session token storage
role base using the javascript classes
implementation of the refresh tokens
all about the patch method
need to remove the bookingStatus
iam getting the latest  or last user given location events only , when i new user asking for the http://localhost:3021/event/get

..> deployed the web application  to the aws server staging instance
..>  await app.emit('login',userid);

jest code practices info :
https://github.com/goldbergyoni/javascript-testing-best-practices

These tokens are validated, stored server-side (in-memory, relational database, or key-value stores like Redis), and linked to the client through a session ID returned to the frontend.

Users are redirected back to the frontend with a session ID cookie

This is the Backend For Frontend (BFF) pattern. acting as a proxy between the frontend and the backend, or being the backend itself. In this scenario, the frontend avoids handling authentication/authorization, sending requests to the backend which also auto-sends the session cookie. The backend handles the rest.

how to get thw test code  coverage repost with the overall %


npm run test -- -u -t="ColorPicker"

ERRORS: 


...> eRROR :
"_EventLoc.default.findOne(...).sort is not a function"
WHILE GIVING THE LOCATION

..>   +   "error": "Cannot read properties of undefined (reading 'toString')",

..> SyntaxError: Unexpected end of JSON input
        at JSON.parse (<anonymous>)

..>  Events.findByIdAndDelete.mockResolvedValue(null);
error : : {"error": "event not found"}

..>  Events.findByIdAndDelete.mockResolvedValue({});
error : {"error": "Cannot read properties of undefined (reading 'toString')"}

...> Expected value: "event booking cancelled successfully"
    Received value: {"error": "Cannot create property 'bookedseats' on boolean 'true'"}


..>  Events.findByIdAndDelete.mockResolvedValue(true);
error : {"error": "Cannot read properties of undefined (reading 'toString')"}




...>    +   "error": "Cannot read properties of undefined (reading 'username')",
error :

.........> difference between the toequal and towatch:
in route :
 message: 'Validation failed in the header requirement not matching@@',

 if expect(responseBody.message).toEqual('Validation failed in the header requirement not matching'); error
if  expect(responseBody.message).toMatch('Validation failed in the header requirement not matching'); no error 
==========================>



import roleMiddleware from '../path-to-your-middleware-file.js'; // Update with actual path

describe("Role-Based Middleware", () => {
    let mockRequest, mockReply;

    beforeEach(() => {
        mockRequest = { user: { role: "user" } };
        mockReply = {
            status: jest.fn().mockReturnThis(),
            send: jest.fn()
        };
    });

    test("should allow access when user has required role", () => {

        const middleware = roleMiddleware(["admin", "user"]);
        middleware(mockRequest, mockReply);

        expect(mockReply.status).not.toHaveBeenCalled();
        expect(mockReply.send).not.toHaveBeenCalled();
    });

    test("should deny access when user does not have the required role", () => {
        const middleware = roleMiddleware(["admin"]);
        middleware(mockRequest, mockReply);

        expect(mockReply.status).toHaveBeenCalledWith(401);
        expect(mockReply.send).toHaveBeenCalledWith({
            error: "User role not having the permissions to do"
        });
    });
});


==========================>==========================>==========================>==========================>




{

    "username":"s",
    "password":"s123",
    "email":"s123@gmail.com",
    "role":"user"
}



{

    "username":"s",
    "password":"s123"
}


==========================>==========================>==========================>==========================>


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OTlmNmEzN2Y3ZDM5MTRmMjFjMGFkNSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MTQzNDY3fQ.5kBBHsV1KZjH8UT-hu_h6czX7PZZL8ZiXdb3lKWaNjI





==========================>==========================>==========================>==========================>
http://localhost:3021/event/location

{
    "eventneedlocation": "nkd",
    "_id": "6799f7777f7d3914f21c0ad8",
    "__v": 0
}

==========================>==========================>==========================>==========================>

{
    "amountrange": 5,
    "eventname": "krishna-tech-program",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "nkd",
    "eventtime": "18:15:10",
    "eventManager": "d",
    "eventManagerEmail": "d123@gamil.com",
    "eventStatus": "Booked",
    "eventBookedBy": "s",
    "email": "s123@gmail.com",
    "NoOfSeatsBooking": 20,
    "_id": "679a01fd4759a9056069f916",
    "__v": 0
}

==========================>==========================>==========================>==========================>


register :

{

    "username":"aa",
    "password":"aa123",
    "email":"aa123@gmail.com",
    "role":"user"
}

==========================>==========================>==========================>==========================>

login :

    {
    "username":"aa",
    "password":"aa123"
}

==========================>==========================>==========================>==========================>


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWEwNjY1MmM5OWFmZTMwYmIxOTE3OSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MTQ3NTEyfQ.Oh6T5uvP1i0UmCdIziiOxKgeSeEfg6AgGE2_tVEHKjY



==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>

{

    "username":"bb",
    "password":"bb123",
    "email":"bb123@gmail.com",
    "role":"user"
}




{

    "username":"bb",
    "password":"bb123"
}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWEwY2ExNTFjNDFkMTNjMDVmOWJmOCIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MTQ5MDI5fQ.DwZbwZbur-ff_LW9s7pqFckUjBFHpC65CtFc0aQxMfs




{
    "eventneedlocation": "nkd",
    "_id": "679a0d7551c41d13c05f9bfb",
    "__v": 0
}



{

"eventStatus": "Booked",
    
    "NoOfSeatsBooking": 28

}


==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>



{

    "username":"RAVI",
    "password":"RAVI123",
    "email":"RAVI123@gmail.com",
    "role":"user"
}




{

    "username":"RAVI",
    "password":"RAVI123"
}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWExNWEwNTYyYWU0NzY5YzYwNzQ0YiIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MTUxMzYyfQ.ah2-tFUUWy1TvhtWa0p-AEAGHxgpYIUT1WfawVkDUAs



{
    "eventneedlocation": "nkd",
    "_id": "679a1678562ae4769c60744e",
    "__v": 0
}





http://localhost:3021/event/eventit/6799f0485a0c559122697a42



{

"eventStatus": "Booked",
    
    "NoOfSeatsBooking": 5

}





{
    "amountrange": 10,
    "eventname": "ram-tech-program",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "nkd",
    "eventtime": "18:15:10",
    "eventManager": "d",
    "eventManagerEmail": "d123@gamil.com",
    "eventStatus": "Booked",
    "eventBookedBy": "RAVI",
    "email": "RAVI123@gmail.com",
    "NoOfSeatsBooking": 5,
    "AmountNeedPay": 50,
    "_id": "679a16fd562ae4769c607453",
    "__v": 0
}
==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>

RAVI-ID:679a15a0562ae4769c60744b

_id
679a16fd562ae4769c607453

ObjectId
amountrange
10



_id
679a1dbd489b24b363a2739a
amountrange
10



==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>

{

    "username":"NAG",
    "password":"NAG123",
    "email":"NAG123@gmail.com",
    "role":"admin"
}



{

    "username":"NAG",
    "password":"NAG123"
}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWEyOTIwMjFiN2E4OGUyNDIzMjY0MCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODE1NjM4OH0.xq-MgqC7IXpJhsQVpSmilqp-IGJB-3W-pkQlZHHj6nw


{
   
    "amountrange": 5,
    "eventname": "holi-dancing",
    "eventdate": "2026-02-03",
    "eventlocation": "nam",
    "eventtime": "18:15:10",
      "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0
   
}



after saving:
================>

{
    "amountrange": 5,
    "eventname": "holi-dancing",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "nam",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679a292021b7a88e24232640",
    "_id": "679a2a9c21b7a88e24232644",
    "__v": 0
}



==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>


{

    "username":"VEN",
    "password":"VEN123",
    "email":"VEN123@gmail.com",
    "role":"admin"
}



{

    "username":"VEN",
    "password":"VEN123"
}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWEyYjAwMjFiN2E4OGUyNDIzMjY0NyIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODE1Njg4Nn0.3xzmlb2VS896mmu_uEstjb5_VX-D1tsUa2-HXPXQgEE

{
    "amountrange": 3,
    "eventname": "holi-festival",
    "eventdate": "2026-02-03",
    "eventlocation": "nam",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0
   
}



==========>
after saving:


{
    "amountrange": 3,
    "eventname": "holi-festival",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "nam",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679a2b0021b7a88e24232647",
    "_id": "679a2c3c21b7a88e2423264a",
    "__v": 0
}



==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>

{
    "username":"qqq",
    "password":"qqq123",
    "email":"qqq123@gmail.com",
    "role":"user"
}

==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>==========================>




{
    "username":"rgv",
    "password":"rgv123",
    "email":"rgv123@gmail.com",
    "role":"admin"
}


 
 {"username":"rgv",
    "password":"rgv123"
    }


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWIwZmE5NzM1MDM0OGIzYTA3NjU5NSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODIxNjkzMX0.TlZZseGRSeOX_rF7pXVUjmiG_-gKy8c5BvRlqZbOUQ4




{
    "amountrange": 3,
    "eventname": "raktha-1",
    "eventdate": "2026-02-03",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0
    
}


.....................>
===========================>

{
    "amountrange": 3,
    "eventname": "raktha-1",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679b0fa97350348b3a076595",
    "_id": "679b16ab64fe2a1218f4bb2e",
    "__v": 0
}


.....................>
===========================>s

{
    "username":"puri",
    "password":"puri123",
    "email":"puri123@gmail.com",
    "role":"admin"
}

{
    "username":"puri",
    "password":"puri123"

}

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWIxNzMwNjRmZTJhMTIxOGY0YmIzMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODIxNzMwOX0.My6XWBQC4C1cNMRGrth6WB_8pcm0IcvqxQjmKAMdEWo



{
    "amountrange": 10,
    "eventname": "pokiri",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679b173064fe2a1218f4bb31",
    "_id": "679b17db64fe2a1218f4bb34",
    "__v": 0
}

==============================================================================================================================================================================>

{

"username":"mouli",
    "password":"mouli123",
    "email":"mouli123@gmail.com",
    "role":"user"

}


{

"username":"mouli",
    "password":"mouli123"
}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWIxODMzNjRmZTJhMTIxOGY0YmIzNyIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MjE3NTg2fQ.haZ4Czi8cIC3UA0ag1Duc9qGB-L1HKUST_ge_Jro9EI


{
    "eventneedlocation": "kkk",
    "_id": "679b191b64fe2a1218f4bb3a",
    "__v": 0
}







[
    {
        "_id": "679b16ab64fe2a1218f4bb2e",
        "amountrange": 3,
        "eventname": "raktha-1",
        "eventdate": "2026-02-03T00:00:00.000Z",
        "eventlocation": "kkk",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679b0fa97350348b3a076595",
        "__v": 0
    },
    {
        "_id": "679b17db64fe2a1218f4bb34",
        "amountrange": 10,
        "eventname": "pokiri",
        "eventdate": "2026-02-03T00:00:00.000Z",
        "eventlocation": "kkk",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679b173064fe2a1218f4bb31",
        "__v": 0
    }
]


============================


{
    "amountrange": 3,
    "eventname": "raktha-1",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "eventManager": "rgv",
    "eventManagerEmail": "rgv123@gmail.com",
    "eventStatus": "Booked",
    "eventBookedBy": "mouli",
    "email": "mouli123@gmail.com",
    "NoOfSeatsBooking": 5,
    "AmountNeedPay": 15,
    "userId": "679b183364fe2a1218f4bb37",
    "_id": "679b1a8864fe2a1218f4bb41",
    "__v": 0
}

679b183364fe2a1218f4bb37
{
    "amountrange": 10,
    "eventname": "pokiri",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "eventManager": "puri",
    "eventManagerEmail": "puri123@gmail.com",
    "eventStatus": "Booked",
    "eventBookedBy": "mouli",
    "email": "mouli123@gmail.com",
    "NoOfSeatsBooking": 15,
    "AmountNeedPay": 150,
    "userId": "679b183364fe2a1218f4bb37",
    "_id": "679b1abb64fe2a1218f4bb48",
    "__v": 0
}





679b1a8864fe2a1218f4bb41






679b16ab64fe2a1218f4bb2e













{
    "eventid": "679b17db64fe2a1218f4bb34",
    "amountrange": 10,
    "eventname": "pokiri",
    "eventdate": "2026-02-03T00:00:00.000Z",
    "eventlocation": "kkk",
    "eventtime": "18:15:10",
    "userId": "679b183364fe2a1218f4bb37",
    "_id": "679b2745f0fb8928bc38a2ae",
    "__v": 0
}










 console.log(event.eventid)
new ObjectId('679b17db64fe2a1218f4bb34')

_id:ObjectId('679b17db64fe2a1218f4bb34')
amountrange
10
eventname

 const event1 = await Event.findById(event.eventid);







==========================================================================================================================================================================================================================================================================================================================================================================================================================



o save the login time in the Logs model when the user logs in, you can use JavaScript's Date object to get the current timestamp. In MongoDB, you can store this time as a string, but a more common approach would be to store it as a Date type.

Here‚Äôs how you can handle it:

Update your schema:
First, make sure your logintime field is of type Date if you want to store it as a date object (preferred), or String if you want to store it as a string manually.

js
Copy
const mongoose = require('mongoose');

const LogsSchema = new mongoose.Schema({
  Userid: { type: String, required: true },
  token: { type: String, required: true },
  logintime: { type: Date, required: true }, // Using Date type for time
});

const Logs = mongoose.model('Logs', LogsSchema);
Get current time and save:
You can use new Date() to get the current timestamp. If you want it as a string, you can format it like toISOString(), but if you're using Date type in your schema, just store it directly.

js
Copy
const user1 = new Logs({
  Userid,
  token,
  logintime: new Date() // Store the current date/time
});

await user1.save();
Alternative approach if you prefer storing as a string:
If you still want to store the login time as a string in a specific format (for example, YYYY-MM-DD HH:mm:ss), you can use libraries like moment.js or date-fns for formatting:

js
Copy
const moment = require('moment');

const user1 = new Logs({
  Userid,
  token,
  logintime: moment().format('YYYY-MM-DD HH:mm:ss') // Formatted time
});

await user1.save();







==============================
31-01-2025:
{
    "username":"uday",
    "password":"uday123",
    "email":"uday123@gamil.com",
    "role":"admin"

}


===============================>


{
    
    "username":"uday",
    "password":"uday123"

}


===============================>

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM1YjRhNjc2ODhkYjM4YTAzYjA0MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODMwMDM0OX0.8d2f5JW62C2DhfZuD6sU3G92k0TJAgBfI_7WPyh2zHQ

===============================>
{
    "amountrange": 10,
    "eventname": "uday-events",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "aaa",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679c5b4a67688db38a03b042",
    "_id": "679c5c5e67688db38a03b045",
    "__v": 0
}


===============================>



{
    "username":"ajay",
    "password":"ajay123",
    "email":"ajay123@gamil.com",
    "role":"admin"

}



    {
    "username":"ajay",
    "password":"ajay123"


}





eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM1Y2NhNjc2ODhkYjM4YTAzYjA0OCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODMwMDY3MX0.EqE7mlRnr4q-wpgZI2QYg3vsiU8wIGabMTU4LCaNNTw




{
    "amountrange": 2,
    "eventname": "Ajay-events",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "aaa",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679c5cca67688db38a03b048",
    "_id": "679c5d9e67688db38a03b04b",
    "__v": 0
}



===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>===============================>


{
    "username":"RRR",
    "password":"RRR123",
    "email":"RRR123@gamil.com",
    "role":"user"

}



{
    "username":"RRR",
    "password":"RRR123"

}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM1ZTIzNjc2ODhkYjM4YTAzYjA0ZSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzAxMDc1fQ.Z6niyQ67T4iScMfFeLs1KKa5grXrE_Fx9YcBcgFcFbw

{
    "eventneedlocation": "aaa",
    "_id": "679c5f2867688db38a03b051",
    "__v": 0
}





==============================================>


[
    {
        "_id": "679c5c5e67688db38a03b045",
        "amountrange": 10,
        "eventname": "uday-events",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "aaa",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679c5b4a67688db38a03b042",
        "__v": 0
    },
    {
        "_id": "679c5d9e67688db38a03b04b",
        "amountrange": 2,
        "eventname": "Ajay-events",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "aaa",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679c5cca67688db38a03b048",
        "__v": 0
    }
]


===================================================>

{
    "eventid": "679c5c5e67688db38a03b045",
    "amountrange": 10,
    "eventname": "uday-events",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "aaa",
    "eventtime": "18:15:10",
    "eventManager": "uday",
    "eventManagerEmail": "uday123@gamil.com",
    "eventStatus": "Booked",
    "eventBookedBy": "RRR",
    "email": "RRR123@gamil.com",
    "NoOfSeatsBooking": 5,
    "AmountNeedPay": 50,
    "userId": "679c5e2367688db38a03b04e",
    "_id": "679c613767688db38a03b058",
    "__v": 0
}

===================================================>


===================================================>===================================================>


{
    "username":"aziz",
    "password":"aziz123",
    "email":"aziz123@gamil.com",
    "role":"user"

}




{
    "username":"aziz",
    "password":"aziz123"

}

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM3NWU3N2EwODY4ZDQwOTc3Y2M4ZSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzA3MTQwfQ.49z_v0dq73XC1ASZWWuG0zwanvl1zhZui_A3axd165A




{
    "eventneedlocation": "aaa",
    "_id": "679c76ed7a0868d40977cc91",
    "__v": 0
}





{
    "username":"parigi",
    "password":"parigi123",
    "email":"parigi123@gamil.com",
    "role":"user"

}

{
    "username":"parigi",
    "password":"parigi123"

}

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM3ZDEyN2EwODY4ZDQwOTc3Y2NhNiIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzA4OTQ3fQ.6Fv-c4Cg4M2E9YWCKlBaoLkfPMbaXfspyiXpds_OIjg


{
    "eventneedlocation": "aaa",
    "_id": "679c7dd27a0868d40977cca9",
    "__v": 0
}




====================================================================================================> ====================================================> ====================================================> ====================================================> ====================================================> ====================================================> v====> 


{
    "username":"medak",
    "password":"medak123",
    "email":"medak123@gamil.com",
    "role":"admin"

}


{
    "username":"medak",
    "password":"medak123"
}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5Mjg5ZGIxNDIzOWYzZjk5NTFhZCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODMxNDQ2OX0.gvhfLg1C1eVOYVYbcfU2tDXmw5rGhltBlO-wLa3fNbk



{
    "amountrange": 10,
    "eventname": "medak-function",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "hhh",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679c9289db14239f3f9951ad",
    "_id": "679c9383db14239f3f9951b0",
    "__v": 0
}






{
    "username":"siddipet",
    "password":"siddipet123",
    "email":"siddipet123@gamil.com",
    "role":"admin"

}


{
    "username":"siddipet",
    "password":"siddipet123"

}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5NDJmZGIxNDIzOWYzZjk5NTFiMyIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODMxNDg2Mn0.rwcntqPNEUIKVPvHAMTpXneKnK6mPVdQ3aGnCZnPOJo




{
    "amountrange": 10,
    "eventname": "siddipet-function",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "hhh",
    "eventtime": "18:15:10",
    "totalseats": 100,
    "availableseats": 100,
    "bookedseats": 0,
    "userId": "679c942fdb14239f3f9951b3",
    "_id": "679c94ebdb14239f3f9951b6",
    "__v": 0
}




{
    "username":"kcr",
    "password":"kcr123",
    "email":"kcr123@gamil.com",
    "role":"user"

}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5NTQzZGIxNDIzOWYzZjk5NTFiOSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzE1MTU4fQ.IYwLwWSssbVyxYvDQZOsfvGsjUw3-HD5jl1HgaymxF4


{
    "eventneedlocation": "hhh",
    "_id": "679c9656db14239f3f9951bc",
    "__v": 0
}



.................>
http://localhost:3021/event/get
[
    {
        "_id": "679c9383db14239f3f9951b0",
        "amountrange": 10,
        "eventname": "medak-function",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "hhh",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679c9289db14239f3f9951ad",
        "__v": 0
    },
    {
        "_id": "679c94ebdb14239f3f9951b6",
        "amountrange": 10,
        "eventname": "siddipet-function",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "hhh",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679c942fdb14239f3f9951b3",
        "__v": 0
    }
]

............> 
POST: http://localhost:3021/event/eventit/679c9383db14239f3f9951b0

{
    "eventid": "679c9383db14239f3f9951b0",
    "amountrange": 10,
    "eventname": "medak-function",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "hhh",
    "eventtime": "18:15:10",
    "eventManager": "medak",
    "eventManagerEmail": "medak123@gamil.com",
    "eventStatus": "Booked",
    "eventBookedBy": "kcr",
    "email": "kcr123@gamil.com",
    "NoOfSeatsBooking": 5,
    "AmountNeedPay": 50,
    "userId": "679c9543db14239f3f9951b9",
    "_id": "679c977fdb14239f3f9951c3",
    "__v": 0
}


------------------------------->
GET:http://localhost:3021/event/all
[
    {
        "_id": "679c977fdb14239f3f9951c3",
        "eventid": "679c9383db14239f3f9951b0",
        "amountrange": 10,
        "eventname": "medak-function",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "hhh",
        "eventtime": "18:15:10",
        "eventManager": "medak",
        "eventManagerEmail": "medak123@gamil.com",
        "eventStatus": "Booked",
        "eventBookedBy": "kcr",
        "email": "kcr123@gamil.com",
        "NoOfSeatsBooking": 5,
        "AmountNeedPay": 50,
        "userId": "679c9543db14239f3f9951b9",
        "__v": 0
    }
]

------------------------------------------------------>
http://localhost:3021/event/bookings/679c977fdb14239f3f9951c3
{
    "_id": "679c977fdb14239f3f9951c3",
    "eventid": "679c9383db14239f3f9951b0",
    "amountrange": 10,
    "eventname": "medak-function",
    "eventdate": "2043-02-03T00:00:00.000Z",
    "eventlocation": "hhh",
    "eventtime": "18:15:10",
    "eventManager": "medak",
    "eventManagerEmail": "medak123@gamil.com",
    "eventStatus": "Booked",
    "eventBookedBy": "kcr",
    "email": "kcr123@gamil.com",
    "NoOfSeatsBooking": 2,
    "AmountNeedPay": 20,
    "userId": "679c9543db14239f3f9951b9",
    "__v": 0
}


    
{
    "username":"KTR",
    "password":"KTR123",
    "email":"KTR123@gamil.com",
    "role":"user"

}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5YTNjZGIxNDIzOWYzZjk5NTFkMyIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzE2NDUzfQ.b2MivrLMNOba6HKbCAkNKm-j8WN7acoIjR81kFSrjjs

{
    "eventneedlocation": "hhh",
    "_id": "679c9b16db14239f3f9951d6",
    "__v": 0
}


GET: http://localhost:3021/event/get


[
    {
        "_id": "679c9383db14239f3f9951b0",
        "amountrange": 10,
        "eventname": "medak-function",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "hhh",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 98,
        "bookedseats": 2,
        "userId": "679c9289db14239f3f9951ad",
        "__v": 0
    },
    {
        "_id": "679c94ebdb14239f3f9951b6",
        "amountrange": 10,
        "eventname": "siddipet-function",
        "eventdate": "2043-02-03T00:00:00.000Z",
        "eventlocation": "hhh",
        "eventtime": "18:15:10",
        "totalseats": 100,
        "availableseats": 100,
        "bookedseats": 0,
        "userId": "679c942fdb14239f3f9951b3",
        "__v": 0
    }
]

............>

http://localhost:3021/event/eventit/679c9383db14239f3f9951b0





eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM5ZjExZGIxNDIzOWYzZjk5NTFmMiIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzE3NjYwfQ.XWwfwPTtesoI3f0L7IW1RyjznjJ9URPtrTu8PLRSbtk


....................>
parigi:login

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OWM3ZDEyN2EwODY4ZDQwOTc3Y2NhNiIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4MzI3ODE1fQ.UFrnV4HqS4wFlRCHG0oGhfQHhqqS3LzipKHbAE7Cnr0


............................................................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>..................>







import fastify from 'fastify';
import jwt from 'jsonwebtoken';

const app = fastify({
    logger: true
});


// Attach the backlisted array to the Fastify instance
//app.decorate('backlisted',[]); // This attaches `backlisted` to the Fastify instance

//import app from '../app.js'; noneeed code for [] blacklisted logic 
//export   let backlisted=[]; noneeded code for [] blacklisted logic 


export default(request,reply,done)=>{

    const authHeader=request.headers['authorization'];

    const token=authHeader && authHeader.split(' ')[1];

    if(!token) return reply.status(401).send({error:'token not found'})
        

        // console.log(global.backlistedTokens,"before"); 11

        // if(global.backlistedTokens && global.backlistedTokens.includes(token))11
            
        //     {11
        //         console.log(global.backlistedTokens,"after"); 11
        //     return reply.status(401).send({11
        //         error:'token has been  invalidated,please login again'11
        //     })11
        // } 11

        jwt.verify(token,process.env.SEC,(err,user)=>{ //secret key
            
        if(err){
            return reply.status(403).json({error:'token not found'})
        }
        request.user=user;
        done();
    });
};


//export {app}







...........................................................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>..................>





========================>========================>========================>========
























==============================================>





...........................................................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>...............................................>..................>





========================>========================>========================>========



describe("testing the catch block errors for the Get method ", () => {

    let mockToken;
    let mockUserLog;

    beforeEach(() => {
        mockToken = 'mockedToken.mockedToken.mockedToken';
        Event.find = jest.fn(); 
        EventLoc.findOne = jest.fn();
        
        jwt.verify.mockReturnValue({ id: 'mockUserId', role: 'admin' });

        mockUserLog = {
            _id: 'log123',
            UserId: 'mockUserId',
            logintime: new Date(),
            logouttime: null,
            UserToken: mockToken,
            save: jest.fn().mockResolvedValue(true)
        };

        Logs.findOne.mockResolvedValue(mockUserLog);

        // Events.prototype.save = jest.fn().mockResolvedValue([{
           
    });
    
        test.each([
            [
                () => {
                    Event.find.mockRejectedValueOnce(new Error("Database error"));
                },
                "Event.find throws error",
            ],
            [
                () => {
                    EventLoc.findOne.mockRejectedValueOnce(new Error("Database error"));
                },
                "EventLoc.findOne throws error",
            ],
            [
                () => {
                    EventLoc.findOne.mockResolvedValueOnce({ eventneedlocation: "Test Location" });
                    Event.find.mockRejectedValueOnce(new Error("Database error"));
                },
                "Event.find fails after EventLoc.findOne resolves",
            ],
        ])
    
    ("should respond with a status code of 400 if the working for the  admin  succefully or not ", async (mockFunction,des) => {
     
        await mockFunction();
    
            const response = await app.inject({
                method: 'GET',
                url: '/event/get',
                headers: {
                    'Authorization': `Bearer ${mockToken}`  // Include the mock Authorization header
                }
            });

            expect(response.statusCode).toBe(400);
            expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
            const responseBody = JSON.parse(response.body);
            expect(responseBody).toEqual({error: "Database failed while getting the events data,Error triggering the catch block" });   
       
    });
    afterAll(async () => {
        await app.close(); 
});

});


========================================================================================================================>
=========================================================================>

// test case for the catch block errors for both the admin and user  when EventLoc model fails  
describe("testing the catch block errors for the Get method ", () => {

    let mockToken;
    let mockUserLog;

    beforeEach(() => {
        mockToken = 'mockedToken.mockedToken.mockedToken';
        EventLoc.findOne = jest.fn();
       
        
        jwt.verify.mockReturnValue({ id: 'mockUserId', role: 'admin' });

        mockUserLog = {
            _id: 'log123',
            UserId: 'mockUserId',
            logintime: new Date(),
            logouttime: null,
            UserToken: mockToken,
            save: jest.fn().mockResolvedValue(true)
        };

        Logs.findOne.mockResolvedValue(mockUserLog);

        // Events.prototype.save = jest.fn().mockResolvedValue([{
           
    });
    
        test("should respond with a status code of 400 if the working for the  admin  succefully or not ", async () => {
     
      
        EventLoc.findOne.mockRejectedValueOnce(new Error("Database error"));
    
            const response = await app.inject({
                method: 'GET',
                url: '/event/get',
                headers: {
                    'Authorization': `Bearer ${mockToken}`  // Include the mock Authorization header
                }
            });

            expect(response.statusCode).toBe(400);
            expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
            const responseBody = JSON.parse(response.body);
            expect(responseBody).toEqual({error: "Database failed while getting the events data,Error triggering the catch block" });   
       
    });
    afterAll(async () => {
        await app.close(); 
});

});

=============================================================================>
====================================================================================================>

this is for the middleware validation in the logout validation logic :

    

        //jwt.sign = jest.fn().mockReturnValue(mockToken);

        //    jwt.verify.mockImplementation((token, Process, callback) => {

        //                  callback(null, { id: 'mockUserId', role: 'admin' });
        //           });

        //           Logs.findOne.mockResolvedValue({
        //                      UserToken: mockToken,
        //                          UserId: 'mockUserId',
        //                      });


        // Logs.findOne = jest.fn().mockResolvedValue(true); // Simulating no existing log
        // Logs.prototype.save = jest.fn().mockResolvedValue(true);


====================================================================================================>
====================================================================================================>
====================================================================================================>
====================================================================================================>


 const event = await Event.findById(request.params.id);

        if (!event || event.userId.toString() !== request.user.id) {
            return reply.status(400).send({ error: 'event not found' })
        }

        //await event.deleteOne();

        

const event1 =await Event.findByIdAndDelete(request.params.id);

if(event1){
reply.status(200).send({ message: 'event deleted successfully' });
}











//////////////////////////////////////


// test("should return an error if NoOfSeatsBooking is zero", async () => {
//     const mockToken = 'mocked1Token.mocked1Token.mocked1Token';
//     const mockEvent = {
//         _id: "67ab179b5ae8f11485a9bd35",
//         amountrange: 10,
//         eventname: "Event F",
//         eventdate: "2027-02-10T00:00:00.000Z",
//         eventlocation: "location f",
//         eventtime: "15:30:30",
//         totalseats: 100,
//         availableseats: 50,
//         bookedseats: 0,
//         userId: "mockUser1Id",
//         __v: 0
//     };

//     Events.findByIdAndUpdate.mockResolvedValue(mockEvent);
//     const bodydata = { NoOfSeatsBooking: 0 };
//     const response = await app.inject({
//         method: 'PUT',
//         url: '/event/bookings/67ab179b5ae8f11485a9bd35',
//         payload: bodydata,
//         headers: { 'Authorization': `Bearer ${mockToken}` },
//     });
//     expect(response.statusCode).toBe(400);
//     let responseBody = JSON.parse(response.body);
//     expect(responseBody).toEqual({
//         message: "no of seats cannot be zero"
//     });
// });


















Before update event:
 const mockEvent = {
        
            "id": "67ab179b5ae8f11485a9bd35",
            "amountrange": 10,
            "eventname": "Event F",
            "eventdate": "2027-02-10T00:00:00.000Z",
            "eventlocation": "location f",
            "eventtime": "15:30:30",
            "totalseats": 100,
            "availableseats": 40,
            "bookedseats": 60,
            "userId": "mockUser1Id",
            "__v": 0
        
    }

before update emb
const data={

      
            "eventid": "67ab179b5ae8f11485a9bd35",
            "amountrange": 10,
            "eventname": "Event F",
            "eventdate": "2027-02-10T00:00:00.000Z",
            "eventlocation": "location f",
            "eventtime": "15:30:30",
            "eventManager": "EventManagerUser",
            "eventManagerEmail": "eventmanager@example.com",
            "eventBookedBy": "BookingUser",
            "email": "bookinguser@example.com",
            "NoOfSeatsBooking": 10,
            "AmountNeedPay": 100,
            "userId": "mockUser1Id"
}




after update event:
 const mockEvent = {
        
            "id": "67ab179b5ae8f11485a9bd35",
            "amountrange": 10,
            "eventname": "Event F",
            "eventdate": "2027-02-10T00:00:00.000Z",
            "eventlocation": "location f",
            "eventtime": "15:30:30",
            "totalseats": 100,
            "availableseats": 30,
            "bookedseats": 70,
            "userId": "mockUser1Id",
            "__v": 0
        
    }


    
after update emb
const data={

      
            "eventid": "67ab179b5ae8f11485a9bd35",
            "amountrange": 10,
            "eventname": "Event F",
            "eventdate": "2027-02-10T00:00:00.000Z",
            "eventlocation": "location f",
            "eventtime": "15:30:30",
            "eventManager": "EventManagerUser",
            "eventManagerEmail": "eventmanager@example.com",
            "eventBookedBy": "BookingUser",
            "email": "bookinguser@example.com",
            "NoOfSeatsBooking": 20,
            "AmountNeedPay": 200,
            "userId": "mockUser1Id"

             "eventid": "67ab179b5ae8f11485a9bd36",
            "amountrange": 50,
            "eventname": "Event B",
            "eventdate": "2028-02-10T00:00:00.000Z",
            "eventlocation": "location b",
            "eventtime": "15:30:30",
            "eventManager": "EventManagerUser",
            "eventManagerEmail": "eventmanager@example.com",
            "eventBookedBy": "BookingUser",
            "email": "bookinguser@example.com",
            "NoOfSeatsBooking": 10,
            "AmountNeedPay": 500,
            "userId": "mockUser1Id"
}

EMB.prototype.deleteOne = jest.fn().mockResolvedValue({

            "eventid": "67ab179b5ae8f11485a9bd36",
            "amountrange": 50,
            "eventname": "Event B",
            "eventdate": "2028-02-10T00:00:00.000Z",
            "eventlocation": "location b",
            "eventtime": "15:30:30",
            "eventManager": "EventManagerUser",
            "eventManagerEmail": "eventmanager@example.com",
            "eventBookedBy": "BookingUser",
            "email": "bookinguser@example.com",
            "NoOfSeatsBooking": 10,
            "AmountNeedPay": 500,
            "userId": "mockUser1Id"

})

 // EMB.prototype.save = jest.fn().mockResolvedValue({
    //     eventid: "67ab179b5ae8f11485a9bd35",
    //     eventManager: EMmockUser.username,
    //     eventManagerEmail: EMmockUser.email,
    //     eventname: "Event F",
    //     eventdate: "2027-02-10T00:00:00.000Z",
    //     eventlocation: "location f",
    //     amountrange: mockEvent.amountrange,
    //     eventtime: "15:30:30",
    //     NoOfSeatsBooking: 20,
    //     eventBookedBy: mockBookingUser.username,
    //     email: mockBookingUser.email,
    //     AmountNeedPay: mockEvent.amountrange * 10,
    //     userId: mockBookingUser._id
    // });2488



        // Events.findById.mockResolvedValue({
    //     _id: "67ab179b5ae8f11485a9bd35",
    //     amountrange: 10,
    //     eventname: "Event F",
    //     eventdate: "2027-02-10T00:00:00.000Z",
    //     eventlocation: "location f",
    //     eventtime: "15:30:30",
    //     totalseats: 100,
    //     availableseats: 100,
    //     bookedseats: 0,
    //     userId: "mockUserId",
    //     __v: 0
    // })1861


// Assuming you import deleteOne from a module

import { deleteOne } from './yourModule';



// Inside your test file

jest.mock('./yourModule'); // Mock the entire module



// Create a mock for deleteOne

const mockDeleteOne = jest.fn(); 



// Set the mock implementation (optional, defaults to undefined)

mockDeleteOne.mockImplementation(() => Promise.resolve({ deletedCount: 1 })); 



// Access the mocked function

const deleteFunction = require('./yourModule').deleteOne; 



// Now you can use deleteFunction in your test and verify its behavior 

// using mockDeleteOne



[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


When you remove the beforeEach block containing the setup for mockToken and mockUserLog in your test, the test fails because these variables and mock setup are required for the test to function correctly.

Let‚Äôs break down what happens:

1. What beforeEach does:
The beforeEach block is a setup function that runs before each test case. This ensures that the necessary mocks and values are in place before each test executes.
Mocking the token (mockToken): In this block, you set mockToken to a string ('mockedToken.mockedToken.mockedToken'). This simulates the token value you would expect in a real HTTP request.
Mocking JWT (jwt.verify.mockReturnValue): You mock jwt.verify so that when the JWT token is "verified", it returns a mock object that simulates the expected user data ({ id: 'mockUserId', role: 'user' }).
Mocking mockUserLog: You create an object mockUserLog that represents a log in your system (e.g., containing logId, UserId, login time, and user token). This is mocked to resolve successfully when Logs.findOne.mockResolvedValue(mockUserLog) is called.
2. How this affects the test:
Test Setup:
When you run the test, you are making a request to your /auth/logout endpoint, and for the test to work, the token in the request header (Authorization: Bearer <mockedToken>) has to be validated using the mocked jwt.verify.

The failure happens because without the mockToken or mockUserLog being set up in beforeEach:

No token (mockToken) exists: The authorization header will be missing or invalid, and the JWT verification will fail (or return an unexpected result).
No user log (mockUserLog) exists: The Logs.findOne call will not return the expected mock log object because it is also mocked in beforeEach.
What the test needs:
The Mocked Token: Without the mockToken, the test will attempt to use an undefined or missing token, leading to failures in token validation.
The Mocked User Log: The mockUserLog is needed to simulate a user trying to log out, because your application probably checks the UserToken (mocked token) against a log to ensure it's valid.
3. Why the test fails after removing the beforeEach block:
No token to validate: When the header doesn't include a valid token (or any token), your test is simulating an invalid request. The beforeEach block ensures that the token and user log are set up for every test, but without this block, there‚Äôs no token or valid log to work with, so the test fails.
JWT verification failure: When you attempt to test various invalid header cases, JWT verification is a key step. Since jwt.verify is mocked in beforeEach to return a fake user object, removing this causes jwt.verify not to return the expected value, potentially leading to errors.
4. What you can do to fix it:
If you remove beforeEach, you need to mock both mockToken and mockUserLog somewhere else in your test code to ensure that they exist and are valid before each test case.
Alternatively, if you remove the setup but still want the test to pass, you would need to either:
Mock jwt.verify and Logs.findOne in each individual test.
Or, ensure the headers and request behavior are set up correctly in each test case without relying on the beforeEach block.
Example Fix (if you remove beforeEach):
If you remove the beforeEach block, you can mock the values directly within each test case:

js
Copy
test("should respond with the 400 status code for invalid header or token format in logout", async () => {
    let mockToken = 'mockedToken.mockedToken.mockedToken';
    jwt.verify.mockReturnValue({ id: 'mockUserId', role: 'user' });

    const mockUserLog = {
        _id: 'log123',
        UserId: 'mockUserId',
        logintime: new Date(),
        logouttime: null,
        UserToken: mockToken,
        save: jest.fn().mockResolvedValue(true)
    };
    
    Logs.findOne.mockResolvedValue(mockUserLog);

    const invalidHeadersTestCases = [
        {}, // No Authorization header
        { Authorization: "" }, // Empty Authorization
        { Authorization: "Bearer" }, // Missing token
        { Authorization: "Bearer " }, // Missing token after space
        { Authorization: "Bearer.invalid.token" }, // Invalid format
        { Authorization: "RandomToken 12345" }, // Wrong prefix
        { Authorization: "Bearer12345" }, // No space after Bearer
        { Authorization: "Bearer mockedToken" }, // Only one part of JWT
    ];

    for (let i = 0; i < invalidHeadersTestCases.length; i++) {
        const response = await app.inject({
            method: 'POST',
            url: '/auth/logout',
            headers: invalidHeadersTestCases[i]
        });

        expect(response.statusCode).toBe(400);
        expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
        const responseBody = JSON.parse(response.body);
        expect(responseBody.error).toBe('Bad Request');
        expect(responseBody.message).toEqual('Validation failed in the header requirement not matching');
    }
});
Conclusion:
The test fails because it depends on mocked values that are set in beforeEach. Removing the beforeEach without replacing the mock setup in each individual test results in undefined variables, causing errors in JWT validation and the absence of expected logs for validation checks.



[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

1. Understanding the mockSave Object:
You define a mockSave object that looks like this:

js
Copy
const mockSave = {
    UserId: 'user123',
    logintime: new Date(),
    logouttime: null,
    UserToken: 'mockedToken.mockedToken.mockedToken',
}
This is a plain JavaScript object representing some mock data. It contains fields like UserId, logintime, logouttime, and UserToken. However, this is just an object and does not contain any mock methods or behavior. It's simply data.

You also have this mock setup:

js
Copy
Logs.prototype.save = jest.fn().mockResolvedValue(true);
Here, you are mocking the save method of the Logs class (or the Logs object prototype). When you call save on any instance of Logs, it will return a resolved promise with a value of true (as if the save operation was successful).

Note: This is mocking the prototype method on Logs. So whenever you create an instance of Logs, its save method will behave like this, returning a resolved promise.

2. Understanding mockUserLog:
Then you define:

js
Copy
mockUserLog = {
    _id: 'log123',
    UserId: 'user123',
    logintime: new Date(),
    logouttime: null,
    UserToken: 'mockedToken.mockedToken.mockedToken',
    save: jest.fn().mockResolvedValue(true)
};
In this case, mockUserLog is an object that represents a log entry and contains the same fields as mockSave, but importantly it also includes a save method that is mocked directly on the object. This save method returns a resolved promise with the value true, just like in your Logs.prototype.save mock.

3. The Logs.findOne.mockResolvedValue(mockUserLog); Setup:
You also define:

js
Copy
Logs.findOne.mockResolvedValue(mockUserLog);
This is mocking the findOne method of Logs so that when you call Logs.findOne(), it will return the mockUserLog object you defined above. This is a mock of the database query, and it will return the mock log object as if it had been fetched from the database.

4. Why Do They Work the Same Way?
Both approaches work because of the way mocking works in Jest:

In the first case with Logs.prototype.save: You're mocking the save method for all instances of the Logs class. Whenever you call save on an instance of Logs, it will return true as a resolved promise. This works globally for all Logs instances created in the test.

In the second case with mockUserLog.save: You're directly adding the mocked save method to a specific object (mockUserLog). This method is only available on mockUserLog. When you call mockUserLog.save(), it will return true as a resolved promise. This is localized to that single mock object.

Since both approaches involve mocking the save method and returning a resolved promise, the behavior is effectively the same in your test:

The Logs.prototype.save approach mocks the method on the class prototype, affecting all instances.
The mockUserLog.save approach mocks the method on the instance itself.
Both methods ensure that when the save method is called (either on a Logs instance or directly on mockUserLog), it will return the mocked behavior you want in your test.

In Summary:
Logs.prototype.save = jest.fn().mockResolvedValue(true);: This mocks the save method for the entire Logs prototype. Every instance of Logs will have this mocked save behavior.
mockUserLog.save = jest.fn().mockResolvedValue(true);: This mocks the save method directly on a specific object (mockUserLog). It will not affect other instances of Logs, only this object.
Both achieve the same result of mocking the save method and making it return a resolved promise with true, so they behave equivalently in your test scenario.



when a user is logged out the tokeb need to be removed from the Logs model and logout time need to be update and here iam having the unit test codes and here when i try to , 

in the successfully logout functionality 

when i use this 


    const mockUserLog1 = {
             _id: 'log123',
             UserId: 'mockUserId',
             logintime: new Date(),
             logouttime: new Date(),
             UserToken: null,
             save: jest.fn().mockResolvedValue(true)
         };

          Logs.findOne.mockResolvedValue(mockUserLog1); iam getting error here saying the 400 , undefied  

          And second error ima getting is that , in the catch block iam getting the invalid token or exprired token errro 

          
describe("Testcases for the logout functionality", () => {

    let mockToken;
    let mockUserLog;

    beforeEach(() => {
        mockToken = 'mockedToken.mockedToken.mockedToken';

        jwt.verify.mockReturnValue({ id: 'mockUserId', role: 'user' });

        mockUserLog = {
            _id: 'log123',
            UserId: 'mockUserId',
            logintime: new Date(),
            logouttime: null,
            UserToken: mockToken,
            save: jest.fn().mockResolvedValue(true)
        };

      


    });


    test("should respond with the 400 status code for invalid header or token format is incorrect  in logout functionality", async () => {

       
        Logs.findOne.mockResolvedValue(mockUserLog);
        const invalidHeadersTestCases = [
            {}, // No Authorization header
            { Authorization: "" }, // Empty Authorization
            { Authorization: "Bearer" }, // Missing token
            { Authorization: "Bearer " }, // Missing token after space
            { Authorization: "Bearer.invalid.token" }, // Invalid format
            { Authorization: "RandomToken 12345" }, // Wrong prefix
            { Authorization: "Bearer12345" }, // No space after Bearer
            { Authorization: "Bearer mockedToken" }, // Only one part of JWT
        ];

        for (let i = 0; i < invalidHeadersTestCases.length; i++) {

            const response = await app.inject({
                method: 'POST',
                url: '/auth/logout',
                headers: invalidHeadersTestCases[i]

            })



            expect(response.statusCode).toBe(400);  
            expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
            const responseBody = JSON.parse(response.body);
            expect(responseBody.error).toBe('Bad Request');
            expect(responseBody.message).toEqual('Validation failed in the header requirement not matching');

        }

    }),

    

    test("should return 200 and successfully log out the user", async () => {

        // const mockUserLog1 = {
        //     _id: 'log123',
        //     UserId: 'mockUserId',
        //     logintime: new Date(),
        //     logouttime: new Date(),
        //     UserToken: null,
        //     save: jest.fn().mockResolvedValue(true)
        // };
        Logs.findOne.mockResolvedValue(mockUserLog);
       
        const response = await app.inject({
            method: 'POST',
            url: '/auth/logout',
            headers: {
                'Authorization': `Bearer ${mockToken}`,
            },
        });


        expect(response.statusCode).toBe(200);
        expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
        const responseBody = JSON.parse(response.body);

        expect(responseBody.message).toBe('user logged out successfully');

    }),

    test("should return 400 status when Logs.findOne throws an error", async () => {

        Logs.findOne.mockRejectedValue(new Error('Database error'));

 
  

       

        const response = await app.inject({
            method: 'POST',
            url: '/auth/logout',
            headers: {
                Authorization: `Bearer ${mockToken}`,
            },
        });


        expect(response.statusCode).toBe(403);
        expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));

        const responseBody = JSON.parse(response.body);

        expect(responseBody.error).toEqual('error while logout of the current-user');
    }),





    test("should return 400 if no active session is found for the user", async () => {

        
        Logs.findOne.mockResolvedValue(null);

         const response = await app.inject({
             method: 'POST',
             url: '/auth/logout',
             headers: {
                 Authorization: `Bearer ${mockToken}`  
             },
         });
 
      
         expect(response.statusCode).toBe(403);
         expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));
 
         const responseBody = JSON.parse(response.body);
 
        
       
         expect(responseBody.error).toEqual('User is logged out, access denied');
     }),

     test("should return 403 if the token is invalid or expired", async () => {
        // Mock JWT verification failure

        jwt.verify.mockReturnValue({ id: 'mockUserId', role: 'user' });

        jwt.verify.mockImplementation(() => {
            throw new Error("Invalid token");
        });

        const mockToken = "invalid.mocked.token";

        const response = await app.inject({
            method: 'POST',
            url: '/auth/logout', 
            headers: { Authorization: `Bearer ${mockToken}` }
        });

        // Log response for debugging
        console.log("Response Body:", response.body);

        // Assertions
        expect(response.statusCode).toBe(403);
        expect(response.headers['content-type']).toEqual(expect.stringContaining('application/json'));

        const responseBody = JSON.parse(response.body);
        expect(responseBody.error).toEqual('Invalid or expired token');
    });
})




It seems like you're encountering two main issues in your logout functionality tests.

1. Error 400: Undefined
This issue could be occurring because of the way the mock is being set up for the Logs.findOne call. The findOne method might not be returning the expected mockUserLog object when the test runs, which is causing undefined behavior and leading to the error you're seeing.

A few things you can check to resolve this:

Ensure Logs.findOne is properly mocked: In your test, you're using Logs.findOne.mockResolvedValue(mockUserLog) to mock the behavior, but ensure that the Logs model is properly imported and mocked in your test file. This would look something like:

javascript
Copy
jest.mock('../path/to/Logs'); // Correctly mock the Logs model
Check if the mock resolves correctly: If Logs.findOne does not resolve correctly, you could end up with an undefined object. Make sure that the object being returned from the mock matches the expected data structure for your app logic.

2. Error Handling Invalid Token (Invalid or Expired Token)
For your test("should return 403 if the token is invalid or expired"), you are throwing an error manually using jwt.verify.mockImplementation(() => { throw new Error("Invalid token"); });.

This is correct in terms of testing the invalid token scenario. However, there could be an issue with how you're handling the try-catch block in the actual logout implementation.

You should verify that when the token is invalid or expired, your catch block properly handles the error and returns a 403 response with the correct message.

Here's an example of how you might handle the catch block for invalid or expired tokens:

javascript
Copy
try {
    const decoded = jwt.verify(token, SECRET_KEY); // Token validation logic
    // Additional code to handle logout logic
} catch (error) {
    // If invalid or expired token, handle error
    if (error.name === 'TokenExpiredError') {
        return res.status(403).json({ error: 'Token has expired' });
    } else if (error.name === 'JsonWebTokenError') {
        return res.status(403).json({ error: 'Invalid token' });
    }
    // Handle other errors
    return res.status(500).json({ error: 'Something went wrong' });
}
Troubleshooting Steps:
Verify the structure of the data returned by Logs.findOne. If the Logs.findOne mock isn't correctly resolving the expected object, you'll run into undefined issues. You can log the returned object in your test and ensure it's not null or undefined.

javascript
Copy
console.log('Mock user log:', mockUserLog);
Check that jwt.verify is correctly mocked for both success and failure cases. Ensure your mock implementation covers both valid and invalid token cases.

Log responses in the tests to get a better view of what might be failing:

javascript
Copy
console.log('Response Body:', response.body);
Let me know if you need further help with any of the test cases!




