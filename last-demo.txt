export const login = async (request, reply) => {
    const { username, password } = request.body;
    try {
        // Find user by username
        const user = await User.findOne({ username });
        if (!user) {
            return reply.status(400).send({ error: 'User not found' });
        }

        // Compare the password
        const ismatch = await bcrypt.compare(password, user.password);
        if (!ismatch) {
            return reply.status(400).send({ error: 'Invalid credentials' });
        }

        // Create payload and sign the JWT token
        const payload = { id: user._id, role: user.role };
        const token = jwt.sign(payload, process.env.SEC);

        // Check if there's an existing log entry for this user
        const existingLog = await Logs.findOne({ UserId: user._id, logouttime: null });

        if (existingLog) {
            // If the user already has an active session, update the existing log
            existingLog.UserToken = token;
            existingLog.logintime = Date.now(); // Update login time (optional, if you want to track new logins)
            
            // Save the updated log
            await existingLog.save();
            console.log("Existing log updated:", existingLog);
            reply.status(200).send({ token });
        } else {
            // If no active session is found, create a new log entry
            const newLog = new Logs({
                UserId: user._id,
                logintime: Date.now(),
                logouttime: null,
                UserToken: token
            });

            await newLog.save();
            console.log("New log entry created:", newLog);
            reply.status(200).send({ token });
        }
    } catch (err) {
        // Log the actual error message for debugging
        console.error('Error during login:', err);
        reply.status(500).send({ error: 'Error while logging in the user', details: err.message });
    }
};







{
    "username":"monk",
    "password":"monk123"
}


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTBiNmYwMmE5NDZiYWQ2NTVlMjM3MyIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczODU4NjA0OH0.3Fk8dQwEngXSB7XzdRNSspka8HNjPGDFdM6HFcqwEdU





{
    "username":"BABA-1",
    "password":"BABA-1123"

}



eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YTBiZTk3MjcxNTg0NDc2M2Y1MWE2ZiIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM4NTg3ODY3fQ.oKxBVQgaySdyajoaDAYZ2rRS2UWrgj_sRqJcecUDoBM























